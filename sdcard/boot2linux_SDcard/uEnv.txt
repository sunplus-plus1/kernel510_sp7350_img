#
## uEnv.txt for arm64
#

NONOS_IMG=a926.img
KERNEL_IMG=uImage
DTB=dtb
sRpi_args=setenv filesize 0; fatsize $isp_if $isp_dev /cmdline.txt; if test $filesize != 0; then fatload $isp_if $isp_dev $addr_dst_dtb /cmdline.txt; raspb init $fileaddr $filesize; fi;

##bootargs
sbootargs=setenv bootargs console=ttyS0,921600 earlycon root=/dev/mmcblk1p2 rw user_debug=255 rootwait $bootargs;

## load kernel
sload_kernel=echo "fatload $isp_if $isp_dev $addr_dst_kernel /$KERNEL_IMG"; fatload $isp_if $isp_dev $addr_dst_kernel /$KERNEL_IMG;

## load dtb
sload_dtb=echo "fatload $isp_if $isp_dev $addr_dst_dtb /$DTB"; fatload $isp_if $isp_dev $addr_dst_dtb /$DTB;

## load nonos - Since $addr_dst_nonos is reserved, load nonos image to $addr_dst_kernel first, and then copy it to $addr_dst_nonos.
sload_nonos=echo "fatload $isp_if $isp_dev $addr_dst_kernel /$NONOS_IMG"; fatload $isp_if $isp_dev $addr_dst_kernel /$NONOS_IMG; setexpr tmpval $filesize + 3; setexpr tmpval $tmpval / 4; echo \"cp.l $addr_dst_kernel $addr_dst_nonos $tmpval\"; cp.l $addr_dst_kernel $addr_dst_nonos $tmpval;
snonos_run=echo "Booting M4 at ${addr_dst_nonos}";
sboot_nonos=setenv filesize 0; fatsize $isp_if $isp_dev /$NONOS_IMG; if itest.l ${filesize} != 0; then run sload_nonos; run snonos_run; fi;
saddr=setexpr addr_dst_kernel ${addr_dst_kernel} + 0x40;
sverify=verify ${addr_dst_kernel} ${do_secure};

##boot cmd
sboot=echo "booti ${addr_dst_kernel} - ${fdtcontroladdr}"; booti ${addr_dst_kernel} - ${fdtcontroladdr};
uenvcmd=run sload_kernel; run sbootargs; run sverify; run saddr sboot;

#
## END
#
